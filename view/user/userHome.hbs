<link rel="stylesheet" href="/styles/userHome.css">
 <div class="container">
        <div class="logout-container">
            <a href="/user/logout">
                <button class="logout-button">Logout</button>
            </a>
        </div>
        
        <div class="game-container">
            <div class="game-header">
                <h1>üêç Snake Game</h1>
                <div class="score-display">Score: <span id="score">0</span></div>
            </div>
            
            <canvas id="gameCanvas" width="400" height="400"></canvas>
            
            <div class="game-controls">
                <button class="control-button" id="startBtn">Start Game</button>
                <button class="control-button" id="pauseBtn" disabled>Pause</button>
                <button class="control-button" id="resetBtn">Reset</button>
            </div>
            
            <div class="instructions">
                <p><strong>How to Play:</strong></p>
                <p>Use arrow keys or WASD to control the snake. Eat the red food to grow and increase your score!</p>
                <p>Don't hit the walls or your own tail!</p>
            </div>
        </div>
        
        <div class="game-over" id="gameOver">
            <h2>Game Over!</h2>
            <p>Final Score: <span id="finalScore">0</span></p>
            <button class="control-button" onclick="resetGame()">Play Again</button>
        </div>
    </div>

 <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const finalScoreElement = document.getElementById('finalScore');
        const gameOverElement = document.getElementById('gameOver');
        const startBtn = document.getElementById('startBtn');
        const pauseBtn = document.getElementById('pauseBtn');
        const resetBtn = document.getElementById('resetBtn');

        let gameRunning = false;
        let gamePaused = false;
        let gameLoop;

        // Game variables
        const gridSize = 20;
        const tileCount = canvas.width / gridSize;

        let snake = [
            {x: 10, y: 10}
        ];
        let food = {};
        let dx = 0;
        let dy = 0;
        let score = 0;

        // Initialize game
        function init() {
            createFood();
            gameLoop = setInterval(drawGame, 150);
        }

        // Create food at random position
        function createFood() {
            food = {
                x: Math.floor(Math.random() * tileCount),
                y: Math.floor(Math.random() * tileCount)
            };
            
            // Make sure food doesn't spawn on snake
            for (let segment of snake) {
                if (segment.x === food.x && segment.y === food.y) {
                    createFood();
                    return;
                }
            }
        }

        // Draw everything
        function drawGame() {
            if (gamePaused) return;
            
            clearCanvas();
            moveSnake();
            drawFood();
            drawSnake();
            checkCollisions();
        }

        function clearCanvas() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        }

        function drawSnake() {
            ctx.fillStyle = '#4facfe';
            for (let segment of snake) {
                ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize - 2, gridSize - 2);
            }
        }

        function drawFood() {
            ctx.fillStyle = '#ff4757';
            ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize - 2, gridSize - 2);
        }

        function moveSnake() {
            const head = {x: snake[0].x + dx, y: snake[0].y + dy};
            snake.unshift(head);

            // Check if food eaten
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                scoreElement.textContent = score;
                createFood();
            } else {
                snake.pop();
            }
        }

        function checkCollisions() {
            const head = snake[0];

            // Wall collision
            if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
                gameOver();
                return;
            }

            // Self collision
            for (let i = 1; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    gameOver();
                    return;
                }
            }
        }

        function gameOver() {
            clearInterval(gameLoop);
            gameRunning = false;
            finalScoreElement.textContent = score;
            gameOverElement.style.display = 'block';
            startBtn.disabled = false;
            pauseBtn.disabled = true;
            startBtn.textContent = 'Start Game';
        }

        function startGame() {
            if (!gameRunning) {
                gameRunning = true;
                gamePaused = false;
                gameOverElement.style.display = 'none';
                init();
                startBtn.disabled = true;
                pauseBtn.disabled = false;
                startBtn.textContent = 'Start Game';
            }
        }

        function pauseGame() {
            if (gameRunning) {
                gamePaused = !gamePaused;
                pauseBtn.textContent = gamePaused ? 'Resume' : 'Pause';
                startBtn.disabled = gamePaused;
            }
        }

        function resetGame() {
            clearInterval(gameLoop);
            gameRunning = false;
            gamePaused = false;
            gameOverElement.style.display = 'none';
            
            // Reset game state
            snake = [{x: 10, y: 10}];
            dx = 0;
            dy = 0;
            score = 0;
            scoreElement.textContent = score;
            
            // Reset buttons
            startBtn.disabled = false;
            pauseBtn.disabled = true;
            startBtn.textContent = 'Start Game';
            pauseBtn.textContent = 'Pause';
            
            // Clear canvas
            clearCanvas();
        }

        // Event listeners
        startBtn.addEventListener('click', startGame);
        pauseBtn.addEventListener('click', pauseGame);
        resetBtn.addEventListener('click', resetGame);

        // Keyboard controls
        document.addEventListener('keydown', (e) => {
            if (!gameRunning || gamePaused) return;

            const key = e.key.toLowerCase();
            
            // Prevent reverse direction
            if ((key === 'arrowleft' || key === 'a') && dx !== 1) {
                dx = -1; dy = 0;
            }
            if ((key === 'arrowright' || key === 'd') && dx !== -1) {
                dx = 1; dy = 0;
            }
            if ((key === 'arrowup' || key === 'w') && dy !== 1) {
                dx = 0; dy = -1;
            }
            if ((key === 'arrowdown' || key === 's') && dy !== -1) {
                dx = 0; dy = 1;
            }
        });

        // Initialize canvas
        clearCanvas();

</script>